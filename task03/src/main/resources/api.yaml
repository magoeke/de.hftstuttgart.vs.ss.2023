openapi: 3.0.3
info:
  title: Blog Post Backend
  description: |-
    This is a sample blog post backend based on the OpenAPI 3.0 specification. 

    Some useful links:
    - [Zalando Api Guidelines](https://opensource.zalando.com/restful-api-guidelines)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: Blog Posts
    description: Access blog posts

paths:
  # https://opensource.zalando.com/restful-api-guidelines/#142
  # https://opensource.zalando.com/restful-api-guidelines/#129
  /blog-posts:
    get:
      tags:
        - Blog Posts
      summary: Get all blogposts
      description: Returns all blogposts
      operationId: getBlogPosts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPosts'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPosts'
    post:
      tags:
        - Blog Posts
      summary: Add a new blog post
      description: Add a new blog post
      operationId: addBlockPost
      requestBody:
        description: Create a new blog post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/BlogPostRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPost'
  /blog-posts/{blog-post-id}:
    get:
      tags:
        - Blog Posts
      summary: Find blog post by id
      description: Returns a single blog post
      operationId: getBlogPost
      parameters:
        - name: blog-post-id
          in: path
          description: ID of blog post to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '400':
          description: Invalid ID supplied
        '404':
          description: Blog Post not found
    # https://opensource.zalando.com/restful-api-guidelines/#put
    put:
      tags:
        - Blog Posts
      summary: Updates a blog post
      description: ''
      operationId: updateBlogPost
      parameters:
        - name: blog-post-id
          in: path
          description: ID of blog post that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updates a blog post
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '204':
          description: 'No Content'
    # https://opensource.zalando.com/restful-api-guidelines/#delete
    delete:
      tags:
        - Blog Posts
      summary: Deletes a blog post
      description: delete a blog post
      operationId: deleteBlogPost
      parameters:
        - name: blog-post-id
          in: path
          description: Blog post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 'No Content'
        '400':
          description: Invalid blog post value
  /blog-posts/{blog-post-id}/comments:
    get:
      tags:
        - Blog Posts
      summary: Get all comments for a blog post
      description: Returns all comments for a blog post
      operationId: getCommentsForBlogPost
      parameters:
        - name: blog-post-id
          in: path
          description: Blog post id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comments'
    post:
      tags:
        - Blog Posts
      summary: Add a new comment to a blog post
      description: Add a new comment to a blog post
      operationId: addCommentToBlockPost
      parameters:
        - name: blog-post-id
          in: path
          description: Blog post id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Add comment to blogpost
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          description: Blog post not found
  /blog-posts/{blog-post-id}/comments/{blog-post-comment-id}:
    delete:
      tags:
        - Blog Posts
      summary: Deletes a comment for a blog post
      description: delete a comment for a blog post
      operationId: deleteCommentForBlogPost
      parameters:
        - name: blog-post-id
          in: path
          description: Blog post id of comment
          required: true
          schema:
            type: integer
            format: int64
        - name: blog-post-comment-id
          in: path
          description: Comment id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 'No Content'
        '400':
          description: Invalid blog post value
  # https://opensource.zalando.com/restful-api-guidelines/#138
  /blog-post-locks/{blog-post-id}:
    post:
      tags:
        - Blog Posts
      summary: (Un)lock a blog post
      description: (Un)locks a blog post
      operationId: handleLockOnBlogPost
      parameters:
        - name: blog-post-id
          in: path
          description: Blog post id of comment
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Add comment to blogpost
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPostLock'
          application/xml:
            schema:
              $ref: '#/components/schemas/BlogPostLock'
        required: true
      responses:
        '204':
          description: 'No Content'
        '400':
          description: Invalid blog post value
        '404':
          description: Blog post not found

components:
  schemas:
    BlogPostRequest:
      type: object
      properties:
        locked:
          type: boolean
          example: true
        status:
          type: string
          description: Blog post status
          example: PUBLISHED
          enum:
            - DRAFT
            - PUBLISHED
        # https://opensource.zalando.com/restful-api-guidelines/#118
        blog_post_author_id:
          type: integer
          format: int64
          example: 7
        content:
          type: string
      xml:
        name: BlogPostRequest
    BlogPost:
      allOf:
        - $ref: '#/components/schemas/BlogPostRequest'
        - type: object
          properties:
            blog_post_id:
              type: integer
              format: int64
              example: 10
      xml:
        name: BlogPost
    BlogPosts:
      type: object
      properties:
        # https://opensource.zalando.com/restful-api-guidelines/#120
        blog_posts:
          type: array
          items:
            $ref: '#/components/schemas/BlogPost'
      xml:
        name: blog-posts
    CommentRequest:
      type: object
      properties:
        content:
          type: string
        comment_author_id:
          type: integer
          format: int64
      xml:
        name: CommentRequest
    Comment:
      allOf:
        - $ref: '#/components/schemas/CommentRequest'
        - type: object
          properties:
            blog-post-comment-id:
              type: integer
              format: int64
          xml:
            name: comment
    Comments:
      type: object
      properties:
        blog_posts:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
      xml:
        name: comments
    BlogPostLock:
      type: object
      properties:
        state:
          type: string
          enum:
            - LOCKED
            - UNLOCKED

